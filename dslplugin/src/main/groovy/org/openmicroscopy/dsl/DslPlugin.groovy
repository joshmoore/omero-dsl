package org.openmicroscopy.dsl

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.plugins.JavaPlugin
import org.gradle.api.plugins.JavaPluginConvention
import org.gradle.api.tasks.SourceSet
import org.openmicroscopy.dsl.tasks.DslBaseTask

class DslPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        // Apply the base plugin
        project.plugins.apply(DslPluginBase)

        // Set default for velocity config
        project.dsl.velocity.checkEmptyObjects = false

        // Set compileJava to depend on generateXXX tasks
        configureForJavaPlugin(project)
    }

    void configureForJavaPlugin(Project project) {
        project.plugins.withType(JavaPlugin) { JavaPlugin java ->
            // .ome.xml files
            project.dsl.omeXmlFiles = project.fileTree("src/main/resources/mappings")
                    .matching { include: "**/*.ome.xml" }

            // Default template dir (src/
            project.dsl.databaseTypes = project.fileTree("src/main/resources/properties")
                    .matching { include: "**/*-types.properties" }

            // Default template dir (src/
            project.dsl.templates = project.fileTree("src/main/resources/templates")
                    .matching { include: "**/*.vm" }

            // Set default dir for files generated by .combined files
            project.dsl.outputDir = "src/generated"

            // Configure default outputDir
            JavaPluginConvention javaConvention =
                    project.convention.getPlugin(JavaPluginConvention)

            SourceSet main =
                    javaConvention.sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME)

            main.java.srcDirs "${project.dsl.outputDir}/java"
            main.resources.srcDirs "${project.dsl.outputDir}/resources"

            // Configure compileJava task to depend on our tasks
            project.tasks.named("compileJava").configure { compileJava ->
                compileJava.dependsOn = project.tasks
                        .withType(DslBaseTask)
                        .findAll { it.group == DslPluginBase.GROUP }
            }
        }
    }

}


// Set defaults for all dsl extensions
// NB: not sure about this block
/*project.dsl.code.all { CodeExtension resExt ->
    resExt.outputDir = "java"
}

project.dsl.resource.all { ResourceExtension resExt ->
    resExt.outputFile = "resources"
}*/