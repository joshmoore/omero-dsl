package dslplugin

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.plugins.JavaPlugin

class DslPlugin implements Plugin<Project> {

    /**
     * Convenient way to get access to list of tasks generated by dsl language
     */
    List<DslTask> dslTasks = new ArrayList<>()

    @Override
    void apply(Project project) {
        setupDsl(project)

        // Default configure dsl tasks
        configureVelocityExtension(project)
        configureDslTasks(project)
    }

    /**
     * Sets up the plugin language block
     * @param project
     */
    def setupDsl(Project project) {
        // Create the dsl extension
        Dsl dsl = project.extensions.create('dsl', Dsl)

        // Create velocity inner extension for dsl
        dsl.extensions.create('velocity', VelocityExtension, project)

        // Add NamedDomainObjectContainer for java configs
        dsl.extensions.add("generate", project.container(DslOperation))
    }

    def configureVelocityExtension(Project project) {
        VelocityExtension ve = project.dsl.velocity

        // Set some defaults for velocity
        ve.loggerClassName = project.getLogger().getClass().getName()
    }

    def configureDslTasks(Project project) {
        project.dsl.generate.all { DslOperation info ->
            def taskName = "dsl${info.name.capitalize()}"

            project.afterEvaluate {
                // Combine template directory with template, if the
                // template is not a file (i.e a file name)
                if (project.dsl.templateDir) {
                    if (!info.template.isFile()) {
                        info.template = new File(project.dsl.templateDir.toString(),
                                info.template.toString())
                    }
                }

                if (project.dsl.mappingFiles) {
                    info.omeXmlFiles = project.dsl.mappingFiles
                }

                // Assign property values to task inputs
                def task = project.tasks.create(taskName, DslTask) {
                    group = "omero"
                    description = "parses ome.xml files and compiles velocity template"
                    outputPath = info.outputPath
                    formatOutput = info.formatOutput
                    outFile = info.outFile
                    profile = info.profile
                    template = info.template
                    omeXmlFiles = info.omeXmlFiles
                    velocityProperties = project.dsl.velocity.props.get()
                }

                // Add dsl task to list of tasks
                if (project.plugins.hasPlugin(JavaPlugin)) {
                    // Ensure the DslTask runs before compileJava
                    project.tasks.getByPath("compileJava").mustRunAfter(task)
                }
            }
        }
    }
}
