package dslplugin

import org.apache.velocity.app.VelocityEngine
import org.gradle.api.Plugin
import org.gradle.api.Project

class DslPluginBase implements Plugin<Project> {

    /**
     * Convenient way to get access to list of tasks generated by dsl language
     */
    List<DslTaskBase> dslTasks = new ArrayList<>()

    VelocityEngine velocityEngine = new VelocityEngine()

    @Override
    void apply(Project project) {
        setupDsl(project)

        // Apply and init velocityEngine
        applyVelocityProperties(project)

        // Default configure dsl tasks
        configureDslTasks(project)
    }

    /**
     * Sets up the plugin language block
     * @param project
     */
    def setupDsl(Project project) {
        // Create the dsl extension
        Dsl dsl = project.extensions.create('dsl', Dsl)

        // Create velocity inner extension for dsl
        dsl.extensions.create('velocity', VelocityExtension, project)

        // Add NamedDomainObjectContainer for java configs
        dsl.extensions.add("generate", project.container(DslOperation))
    }

    def applyVelocityProperties(Project project) {
        // Initialise the velocity engine with default settings
        VelocityExtension ve = project.dsl.velocity

        project.afterEvaluate {
            velocityEngine.init(ve.properties.get())
        }

        velocityEngine.evaluate()
    }

    def configureDslTasks(Project project) {
        project.dsl.generate.all { DslOperation info ->
            def taskName = "dsl${info.name.capitalize()}"

            project.afterEvaluate {
                // Assign property values to task inputs
                DslTaskBase task
                if (info.outputPath) {
                    task = project.tasks.create(taskName, DslMultiFileTask) { t ->
                        t.outputPath = info.outputPath
                        t.formatOutput = info.formatOutput
                    }
                } else {
                    task = project.tasks.create(taskName, DslSingleFileTask) { t ->
                        t.outFile.set info.outFile
                    }
                }

                task.group = "omero"
                task.description = "parses ome.xml files and compiles velocity template"
                task.profile = info.profile
                task.templateName = info.templateName
                task.omeXmlFiles = info.omeXmlFiles
                task.velocityEngine = velocityEngine

                // Add dsl task to list of tasks
                dslTasks.add(task)
            }
        }
    }
}
